// Code generated by protoc-gen-connect-go.exe. DO NOT EDIT.
//
// Source: pkg/ToDo/presenter/todo.proto

package presenterconnect

import (
	presenter "SweetheartSuite/v2/pkg/ToDo/presenter"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// ToDoName is the fully-qualified name of the ToDo service.
	ToDoName = "SweetheartSuite.v2.ToDo"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ToDoAddItemProcedure is the fully-qualified name of the ToDo's AddItem RPC.
	ToDoAddItemProcedure = "/SweetheartSuite.v2.ToDo/AddItem"
	// ToDoAddListProcedure is the fully-qualified name of the ToDo's AddList RPC.
	ToDoAddListProcedure = "/SweetheartSuite.v2.ToDo/AddList"
	// ToDoGetItemsProcedure is the fully-qualified name of the ToDo's GetItems RPC.
	ToDoGetItemsProcedure = "/SweetheartSuite.v2.ToDo/GetItems"
)

// ToDoClient is a client for the SweetheartSuite.v2.ToDo service.
type ToDoClient interface {
	AddItem(context.Context, *connect.Request[presenter.AddItemRequest]) (*connect.Response[presenter.AddItemResponse], error)
	AddList(context.Context, *connect.Request[presenter.AddListRequest]) (*connect.Response[presenter.AddListResponse], error)
	GetItems(context.Context, *connect.Request[presenter.GetItemsRequest]) (*connect.Response[presenter.GetItemsResponse], error)
}

// NewToDoClient constructs a client for the SweetheartSuite.v2.ToDo service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewToDoClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ToDoClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &toDoClient{
		addItem: connect.NewClient[presenter.AddItemRequest, presenter.AddItemResponse](
			httpClient,
			baseURL+ToDoAddItemProcedure,
			opts...,
		),
		addList: connect.NewClient[presenter.AddListRequest, presenter.AddListResponse](
			httpClient,
			baseURL+ToDoAddListProcedure,
			opts...,
		),
		getItems: connect.NewClient[presenter.GetItemsRequest, presenter.GetItemsResponse](
			httpClient,
			baseURL+ToDoGetItemsProcedure,
			opts...,
		),
	}
}

// toDoClient implements ToDoClient.
type toDoClient struct {
	addItem  *connect.Client[presenter.AddItemRequest, presenter.AddItemResponse]
	addList  *connect.Client[presenter.AddListRequest, presenter.AddListResponse]
	getItems *connect.Client[presenter.GetItemsRequest, presenter.GetItemsResponse]
}

// AddItem calls SweetheartSuite.v2.ToDo.AddItem.
func (c *toDoClient) AddItem(ctx context.Context, req *connect.Request[presenter.AddItemRequest]) (*connect.Response[presenter.AddItemResponse], error) {
	return c.addItem.CallUnary(ctx, req)
}

// AddList calls SweetheartSuite.v2.ToDo.AddList.
func (c *toDoClient) AddList(ctx context.Context, req *connect.Request[presenter.AddListRequest]) (*connect.Response[presenter.AddListResponse], error) {
	return c.addList.CallUnary(ctx, req)
}

// GetItems calls SweetheartSuite.v2.ToDo.GetItems.
func (c *toDoClient) GetItems(ctx context.Context, req *connect.Request[presenter.GetItemsRequest]) (*connect.Response[presenter.GetItemsResponse], error) {
	return c.getItems.CallUnary(ctx, req)
}

// ToDoHandler is an implementation of the SweetheartSuite.v2.ToDo service.
type ToDoHandler interface {
	AddItem(context.Context, *connect.Request[presenter.AddItemRequest]) (*connect.Response[presenter.AddItemResponse], error)
	AddList(context.Context, *connect.Request[presenter.AddListRequest]) (*connect.Response[presenter.AddListResponse], error)
	GetItems(context.Context, *connect.Request[presenter.GetItemsRequest]) (*connect.Response[presenter.GetItemsResponse], error)
}

// NewToDoHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewToDoHandler(svc ToDoHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	toDoAddItemHandler := connect.NewUnaryHandler(
		ToDoAddItemProcedure,
		svc.AddItem,
		opts...,
	)
	toDoAddListHandler := connect.NewUnaryHandler(
		ToDoAddListProcedure,
		svc.AddList,
		opts...,
	)
	toDoGetItemsHandler := connect.NewUnaryHandler(
		ToDoGetItemsProcedure,
		svc.GetItems,
		opts...,
	)
	return "/SweetheartSuite.v2.ToDo/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ToDoAddItemProcedure:
			toDoAddItemHandler.ServeHTTP(w, r)
		case ToDoAddListProcedure:
			toDoAddListHandler.ServeHTTP(w, r)
		case ToDoGetItemsProcedure:
			toDoGetItemsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedToDoHandler returns CodeUnimplemented from all methods.
type UnimplementedToDoHandler struct{}

func (UnimplementedToDoHandler) AddItem(context.Context, *connect.Request[presenter.AddItemRequest]) (*connect.Response[presenter.AddItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("SweetheartSuite.v2.ToDo.AddItem is not implemented"))
}

func (UnimplementedToDoHandler) AddList(context.Context, *connect.Request[presenter.AddListRequest]) (*connect.Response[presenter.AddListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("SweetheartSuite.v2.ToDo.AddList is not implemented"))
}

func (UnimplementedToDoHandler) GetItems(context.Context, *connect.Request[presenter.GetItemsRequest]) (*connect.Response[presenter.GetItemsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("SweetheartSuite.v2.ToDo.GetItems is not implemented"))
}
