// Code generated by protoc-gen-connect-go.exe. DO NOT EDIT.
//
// Source: pkg/User/presenter/user.proto

package presenterconnect

import (
	presenter "SweetheartSuite/v2/pkg/User/presenter"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// UserName is the fully-qualified name of the User service.
	UserName = "SweetheartSuite.v2.User"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserAddUserProcedure is the fully-qualified name of the User's AddUser RPC.
	UserAddUserProcedure = "/SweetheartSuite.v2.User/AddUser"
	// UserGetUserByMailAddressProcedure is the fully-qualified name of the User's GetUserByMailAddress
	// RPC.
	UserGetUserByMailAddressProcedure = "/SweetheartSuite.v2.User/GetUserByMailAddress"
	// UserGetCoupleByUserIdProcedure is the fully-qualified name of the User's GetCoupleByUserId RPC.
	UserGetCoupleByUserIdProcedure = "/SweetheartSuite.v2.User/GetCoupleByUserId"
)

// UserClient is a client for the SweetheartSuite.v2.User service.
type UserClient interface {
	AddUser(context.Context, *connect.Request[presenter.AddUserRequest]) (*connect.Response[presenter.AddUserResponse], error)
	GetUserByMailAddress(context.Context, *connect.Request[presenter.GetUserByMailAddressRequest]) (*connect.Response[presenter.GetUserByMailAddressResponse], error)
	GetCoupleByUserId(context.Context, *connect.Request[presenter.GetCoupleByUserIdRequest]) (*connect.Response[presenter.GetCoupleByUserIdResponse], error)
}

// NewUserClient constructs a client for the SweetheartSuite.v2.User service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userClient{
		addUser: connect.NewClient[presenter.AddUserRequest, presenter.AddUserResponse](
			httpClient,
			baseURL+UserAddUserProcedure,
			opts...,
		),
		getUserByMailAddress: connect.NewClient[presenter.GetUserByMailAddressRequest, presenter.GetUserByMailAddressResponse](
			httpClient,
			baseURL+UserGetUserByMailAddressProcedure,
			opts...,
		),
		getCoupleByUserId: connect.NewClient[presenter.GetCoupleByUserIdRequest, presenter.GetCoupleByUserIdResponse](
			httpClient,
			baseURL+UserGetCoupleByUserIdProcedure,
			opts...,
		),
	}
}

// userClient implements UserClient.
type userClient struct {
	addUser              *connect.Client[presenter.AddUserRequest, presenter.AddUserResponse]
	getUserByMailAddress *connect.Client[presenter.GetUserByMailAddressRequest, presenter.GetUserByMailAddressResponse]
	getCoupleByUserId    *connect.Client[presenter.GetCoupleByUserIdRequest, presenter.GetCoupleByUserIdResponse]
}

// AddUser calls SweetheartSuite.v2.User.AddUser.
func (c *userClient) AddUser(ctx context.Context, req *connect.Request[presenter.AddUserRequest]) (*connect.Response[presenter.AddUserResponse], error) {
	return c.addUser.CallUnary(ctx, req)
}

// GetUserByMailAddress calls SweetheartSuite.v2.User.GetUserByMailAddress.
func (c *userClient) GetUserByMailAddress(ctx context.Context, req *connect.Request[presenter.GetUserByMailAddressRequest]) (*connect.Response[presenter.GetUserByMailAddressResponse], error) {
	return c.getUserByMailAddress.CallUnary(ctx, req)
}

// GetCoupleByUserId calls SweetheartSuite.v2.User.GetCoupleByUserId.
func (c *userClient) GetCoupleByUserId(ctx context.Context, req *connect.Request[presenter.GetCoupleByUserIdRequest]) (*connect.Response[presenter.GetCoupleByUserIdResponse], error) {
	return c.getCoupleByUserId.CallUnary(ctx, req)
}

// UserHandler is an implementation of the SweetheartSuite.v2.User service.
type UserHandler interface {
	AddUser(context.Context, *connect.Request[presenter.AddUserRequest]) (*connect.Response[presenter.AddUserResponse], error)
	GetUserByMailAddress(context.Context, *connect.Request[presenter.GetUserByMailAddressRequest]) (*connect.Response[presenter.GetUserByMailAddressResponse], error)
	GetCoupleByUserId(context.Context, *connect.Request[presenter.GetCoupleByUserIdRequest]) (*connect.Response[presenter.GetCoupleByUserIdResponse], error)
}

// NewUserHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserHandler(svc UserHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userAddUserHandler := connect.NewUnaryHandler(
		UserAddUserProcedure,
		svc.AddUser,
		opts...,
	)
	userGetUserByMailAddressHandler := connect.NewUnaryHandler(
		UserGetUserByMailAddressProcedure,
		svc.GetUserByMailAddress,
		opts...,
	)
	userGetCoupleByUserIdHandler := connect.NewUnaryHandler(
		UserGetCoupleByUserIdProcedure,
		svc.GetCoupleByUserId,
		opts...,
	)
	return "/SweetheartSuite.v2.User/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserAddUserProcedure:
			userAddUserHandler.ServeHTTP(w, r)
		case UserGetUserByMailAddressProcedure:
			userGetUserByMailAddressHandler.ServeHTTP(w, r)
		case UserGetCoupleByUserIdProcedure:
			userGetCoupleByUserIdHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserHandler returns CodeUnimplemented from all methods.
type UnimplementedUserHandler struct{}

func (UnimplementedUserHandler) AddUser(context.Context, *connect.Request[presenter.AddUserRequest]) (*connect.Response[presenter.AddUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("SweetheartSuite.v2.User.AddUser is not implemented"))
}

func (UnimplementedUserHandler) GetUserByMailAddress(context.Context, *connect.Request[presenter.GetUserByMailAddressRequest]) (*connect.Response[presenter.GetUserByMailAddressResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("SweetheartSuite.v2.User.GetUserByMailAddress is not implemented"))
}

func (UnimplementedUserHandler) GetCoupleByUserId(context.Context, *connect.Request[presenter.GetCoupleByUserIdRequest]) (*connect.Response[presenter.GetCoupleByUserIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("SweetheartSuite.v2.User.GetCoupleByUserId is not implemented"))
}
